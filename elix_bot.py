import logging
import openai
import pandas as pd
from aiogram import Bot, Dispatcher, executor, types
from fuzzywuzzy import process
import os
from datetime import datetime
import sqlite3
import re

# --- CONFIGURATION ---
API_TOKEN = os.getenv("TG_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_KEY")
ADMIN_CHANNEL = os.getenv("ADMIN_CHANNEL", "@your_channel")
ADMIN_IDS = [int(uid) for uid in os.getenv("ADMIN_IDS", "123456789").split(",")]

openai.api_key = OPENAI_API_KEY

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

# --- DATABASE ---
conn = sqlite3.connect("database.db")
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS requests (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    data TEXT,
    timestamp TEXT,
    status TEXT DEFAULT '–Ω–æ–≤–∞—è'
)
""")
conn.commit()

# --- LOAD PRICE LIST ---
price_df = pd.read_excel("–ü—Ä–∞–π—Å –¥–ª—è –≠–ª–∏–∫—Å-2.xlsx")

# --- KEYBOARDS ---
main_kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add("1Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", "2Ô∏è‚É£ –ü–æ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å")
main_kb.add("3Ô∏è‚É£ –û–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", "4Ô∏è‚É£ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞")

consult_kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
consult_kb.add("üë©‚Äç‚öïÔ∏è –í—Ä–∞—á", "üß† –≠–ª–∏–∫—Å-–ò–ò", "üë©‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
consult_kb.add("üîô –ù–∞–∑–∞–¥")

consent_kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
consent_kb.add("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", "üîô –ù–∞–∑–∞–¥")

# --- START ---
@dp.message_handler(commands=['start'])
async def start(msg: types.Message):
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –≠–ª–∏–∫—Å ‚Äî —É–º–Ω—ã–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ Helix.\n–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –∞–Ω–∞–ª–∏–∑–∞–º–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.", reply_markup=main_kb)

# --- SECTION 1: –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ---
@dp.message_handler(lambda msg: msg.text.startswith("1Ô∏è‚É£"))
async def request_consent(msg: types.Message):
    await msg.answer("–ü–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ü–î–Ω.", reply_markup=consent_kb)

@dp.message_handler(lambda msg: msg.text == "‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω")
async def ask_user_data(msg: types.Message):
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–§–ò–û, –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è, —Ç–µ–ª–µ—Ñ–æ–Ω")

@dp.message_handler(lambda msg: "," in msg.text and len(msg.text.split(",")) == 3)
async def save_request(msg: types.Message):
    timestamp = datetime.now().isoformat()
    cursor.execute("INSERT INTO requests (user_id, data, timestamp) VALUES (?, ?, ?)", (msg.from_user.id, msg.text.strip(), timestamp))
    conn.commit()
    req_id = cursor.lastrowid
    await bot.send_message(ADMIN_CHANNEL, f"üì• –ó–∞—è–≤–∫–∞ #{req_id} ({timestamp[:16]}):\n{msg.text.strip()}")
    await msg.reply(f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ù–æ–º–µ—Ä: #{req_id}")

# --- SECTION 2: –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–æ–≤ ---
def search_tests(query):
    matches = []
    for test in query.split(","):
        match, score = process.extractOne(test.strip(), price_df['–ù–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞'])
        if score > 60:
            row = price_df[price_df['–ù–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞'] == match].iloc[0]
            matches.append((match, row['–¶–µ–Ω–∞']))
    return matches

@dp.message_handler(lambda msg: msg.text.startswith("2Ô∏è‚É£"))
async def ask_tests(msg: types.Message):
    await msg.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∞–Ω–∞–ª–∏–∑–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –û–ê–ö, –¢–¢–ì, –≤–∏—Ç–∞–º–∏–Ω D)")

@dp.message_handler(lambda msg: any(x in msg.text.lower() for x in ["–æ–∞–∫", "—Ç—Ç–≥", "–∞–Ω–∞–ª–∏–∑", "–≤–∏—Ç–∞–º–∏–Ω"]))
async def handle_tests(msg: types.Message):
    results = search_tests(msg.text)
    if not results:
        await msg.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–Ω–∞–ª–∏–∑—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–æ—á–Ω–µ–µ.")
        return
    total = sum(price for _, price in results)
    text = "\n".join([f"üßæ {name} ‚Äî {price} ‚ÇΩ" for name, price in results])
    await msg.reply(f"{text}\n\nüí∞ –ò—Ç–æ–≥–æ: {total} ‚ÇΩ")

# --- SECTION 3: –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è ---
@dp.message_handler(lambda msg: msg.text.startswith("3Ô∏è‚É£"))
async def consult_menu(msg: types.Message):
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:", reply_markup=consult_kb)

@dp.message_handler(lambda msg: msg.text == "üë©‚Äç‚öïÔ∏è –í—Ä–∞—á")
async def consult_doctor(msg: types.Message):
    await msg.reply("–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Ä–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    await bot.send_message(ADMIN_CHANNEL, f"üì• –í—Ä–∞—á: @{msg.from_user.username or msg.from_user.id}")

@dp.message_handler(lambda msg: msg.text == "üë©‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
async def consult_admin(msg: types.Message):
    await msg.reply("–ó–∞—è–≤–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    await bot.send_message(ADMIN_CHANNEL, f"üì• –ê–¥–º–∏–Ω: @{msg.from_user.username or msg.from_user.id}")

@dp.message_handler(lambda msg: msg.text == "üß† –≠–ª–∏–∫—Å-–ò–ò")
async def consult_ai(msg: types.Message):
    await msg.reply("–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å. –ù–∞–ø—Ä–∏–º–µ—Ä:\n¬´–ú–Ω–µ 32 –∏ –¢–¢–ì 36 ‚Äî —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ?¬ª")

@dp.message_handler(lambda msg: "—Ç—Ç–≥" in msg.text.lower() or "—á—Ç–æ –¥–µ–ª–∞—Ç—å" in msg.text.lower())
async def ai_reply(msg: types.Message):
    prompt = f"–ü–∞—Ü–∏–µ–Ω—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: {msg.text}\n–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ, –±–µ–∑ –¥–∏–∞–≥–Ω–æ–∑–∞, –Ω–æ –ø–æ —Å—É—Ç–∏."
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "system", "content": "–¢—ã –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –±–µ–∑ –ø—Ä–∞–≤–∞ —Å—Ç–∞–≤–∏—Ç—å –¥–∏–∞–≥–Ω–æ–∑."},
                      {"role": "user", "content": prompt}]
        )
        reply = response.choices[0].message.content
        await msg.reply(reply)
    except:
        await msg.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# --- SECTION 4: –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ ---
@dp.message_handler(lambda msg: msg.text.startswith("4Ô∏è‚É£"))
async def support(msg: types.Message):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –ï–∫–∞—Ç–µ—Ä–∏–Ω–µ", url="https://t.me/ekaterina_username"))
    await msg.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫?", reply_markup=kb)

# --- BACK ---
@dp.message_handler(lambda msg: msg.text == "üîô –ù–∞–∑–∞–¥")
async def back(msg: types.Message):
    await msg.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá", reply_markup=main_kb)

# --- RUN ---
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
